#!/bin/bash 
clear;
function tableNameValidation(){



validationFlag=0;

IFS=' ' read -r -a tableArray <<< $1;

if (( ${#tableArray[@]} > 1 )); then

	
echo -e "\033[31m Table name can't contain SPACE. \033[m";
	validationFlag=1;

fi

if (( ${#tableArray[@]} == 0  )); then
	
	
echo -e "\033[31m Table name can't be EMPTY. \033[m";
	validationFlag=1;

fi

firstCharacter="${tableArray[0]:0:1}"
if [[  $firstCharacter =~ [0-9] ]]; then
	
echo -e "\033[31m Table name can't start with NUMBER. \033[m";
        validationFlag=1;
fi

if [[ "$1" =~ ^[A-Za-z]  ]]; then

	
echo -e "\033[32m Valid Table Name.\033[m" 
else
	
#echo -e "\033[31m Table name must have one Character. \033[m";
	validationFlag=1;

fi


return $validationFlag;



}


function tableExist(){

	currentdb=$1;
	tableName=$2;
	validationFlag=0;



if [[ -f Databases/$currentdb/Data/$tableName  ]]; then
		#echo " This Table Already Exist."
	echo -e "\033[31m This Table Already Exist.  \033[m";

		validationFlag=1;
	fi

	return  $validationFlag;


}

function columnNameValidation(){

validationFlag=0;

IFS=' ' read -r -a  cloumnArray <<< $1;

if (( ${#cloumnArray[@]} > 1 )); then

#        echo "Cloumn name can't contain SPACE."
	 echo -e "\033[31m Cloumn name can't contain SPACE.  \033[m";

        validationFlag=1;

fi

if (( ${#cloumnArray[@]} == 0  )); then

        echo ""
echo -e "\033[31m cloumn name can't be EMPTY.  \033[m";
        validationFlag=1;

fi

firstCharacter="${cloumnArray[0]:0:1}"
echo "first $firstCharacter ...";

if [[  $firstCharacter =~ [0-9] ]]; then
        echo ""
echo -e "\033[31m cloumn name can't start with NUMBER.  \033[m";
        validationFlag=1;
fi


if [[ "$1" =~ [A-Za-z]  ]]; then

        echo ""
echo -e "\033[34m Valid cloumn Name. \033[m" 
else

echo -e "\033[31m cloumn name must have one Character. \033[m";
        echo ""
        validationFlag=1;

fi

return $validationFlag;




}

function createColumn(){
let -i flag=0;
read -p "Enter number of columns" columnsNumber;

for (( i=0; i<$columnsNumber; i++  ))
do
	columnMD="";
	read -p "Enter column Name." columnName;
	columnNameValidation "$columnName";

	namevalid=$?;
	
	if [[ $namevalid == 0  ]]; then
		
		columnMD="$columnName";
		read -p " choose column Data Type 's/S' for String or 'i/I' for Integer (s/i) " columnDT;
		if [[ $columnDT == "s" || $columnDT == "S"  ]] ; then
			columnMD="$columnMD:string";
		elif [[  $columnDT == "i" || $columnDT == "I"  ]]; then
		       columnMD="$columnMD:int";	
		fi
		
	#	read -p "you want to make it Primary Key?.(y/n) " primaryKey;
		if [[ $flag == 0  ]]; then
		read -p "you want to make it Primary Key?.(y/n) " primaryKey;

			if [[ $primaryKey == "y" || $primaryKey == "Y"  ]] ; then
				columnMD="$columnMD:1";
				let flag=1 ;
				#echo "varaible i = $flag";
			fi
		else
			columnMD="$columnMD:0";
		fi

		read -p "you want to make it Unique?.(y/n) " uni;

                        if [[ $uni == "y" || $uni == "Y"  ]] ; then
                                columnMD="$columnMD:1";
                                let flag=1 ;
                                #echo "varaible i = $flag";
			else
				columnMD="$columnMD:0";
                        fi
			
			read -p "you want to make it Not Null?.(y/n) " n;

                        if [[ $n == "y" || $n == "Y"  ]] ; then
                                columnMD="$columnMD:1";
                                let flag=1 ;
                                #echo "varaible i = $flag";
                        else
                                columnMD="$columnMD:0";
                        fi


		
		echo $columnMD >> "Databases/$current_DB/MetaData/$tableName.metadata";


	else
echo -e "\033[31m column Name is InValid Please try a valid name\033[m";
		
			
	fi

done


}



read -p "Enter table Name: " tableName;

tableNameValidation "$tableName";



tableNameFlag=$?;


tableExist  "$current_DB"  "$tableName";

tableExistFlag=$?;




if [[ $tableNameFlag  == 0  &&  $tableExistFlag == 0 ]] ; then

	if touch Databases/$current_DB/Data/$tableName; then
	
		if touch Databases/$current_DB/MetaData/$tableName.metadata; then	
			echo "$LOGNAME create $tableName table" >> dbms.log; 
			echo "Table $tableName created successfully ";
		else 
			echo "";
echo -e "\033[31m there is a problem in creating table check log.  \033[m";


		fi
	

		if createColumn; then

			cat Databases/$current_DB/MetaData/$tableName.metadata;
		else
			echo "Error";
		fi

	else
	       echo "ERROR";	
	fi

else
echo -e "\033[31m There is A problem in creating table check logs...  \033[m";
fi


